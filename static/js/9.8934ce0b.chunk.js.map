{"version":3,"sources":["components/WheatherApp.js","actions/wheatherActions.js"],"names":["WheatherApp","state","city","latitude","longitude","onChange","input","e","_this","setState","Object","defineProperty","target","value","onSubmit","preventDefault","props","reqWeather","this","initWeather","weather","size","keys","length","location","current","react_default","a","createElement","className","style","height","Fragment","Form","FormGroup","Label","for","Col","Input","type","name","id","placeholder","Button","width","src","condition","icon","alt","concat","text","temp_c","region","country","Date","localtime","toLocaleString","weekday","year","month","day","wind_kph","gust_kph","wind_dir","pressure_mb","toFixed","precip_mm","uv","forecast","forecastday","map","v","i","key","date","mintemp_c","maxtemp_c","Component","connect","dispatch","axios","get","then","res","REQUEST_WEATHER","payload","data","catch","err","console","log"],"mappings":"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","file":"static/js/9.8934ce0b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { Col, Button, Form, FormGroup, Label, Input } from 'reactstrap';\r\nimport {connect} from 'react-redux'\r\nimport {initWeather, reqWeather} from \"../actions/wheatherActions\";\r\nimport './Wheather.css'\r\n\r\nclass WheatherApp extends Component {\r\n  state={\r\n    city:'',\r\n    latitude:'',\r\n    longitude:''\r\n  };\r\n  componentWillMount(){\r\n\r\n\r\n\r\n    this.props.initWeather()\r\n  }\r\n  componentDidMount(){\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  onChange=input=>e=>{\r\n    this.setState({[input]:e.target.value})\r\n  };\r\n  onSubmit=e=>{\r\n    e.preventDefault();\r\n    const city=this.state.city;\r\n    this.props.reqWeather(city)\r\n  };\r\n  render() {\r\n    const {weather} = this.props;\r\n    const size=Object.keys(weather).length;\r\n    const location= weather.location;\r\n    const current= weather.current;\r\n    const dateOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }\r\n\r\n    return (\r\n      <div className='bg-weather' style={size>0?{height:'100%'}:{height:'100vh'}} >\r\n      <div className='bg-weather-app container' style={size>0?{height:'100%'}:{height:'100vh'}}>\r\n        <>\r\n\r\n          <Form className='' onSubmit={this.onSubmit}>\r\n            <FormGroup >\r\n              <Label className='container mt-3'  for=\"city\" >Weather App</Label>\r\n              <Col className='p-0'>\r\n                <Input className='d-block w-100' onChange={this.onChange('city')} type=\"text\" name=\"city\" id=\"city\" placeholder=\"City...\" />\r\n\r\n              </Col>\r\n            </FormGroup>\r\n\r\n            <FormGroup >\r\n              <Col className='p-0'>\r\n                <Button className='d-block w-100' type='submit'>Find Weather</Button>\r\n              </Col>\r\n\r\n            </FormGroup>\r\n          </Form>\r\n          </>\r\n        <div>\r\n          {size?\r\n            <div>\r\n            <ul className='ul-weather'>\r\n              <li>{`Weather   `}<img style={{height:'20px',width:'20px'}} src={weather.current.condition.icon} alt=\"\"/>{`${current.condition.text} `}\r\n                {`${current.temp_c} °С`}\r\n              </li>\r\n              <li>{`Name ${weather.location.name}`} </li>\r\n              <li>{`Region ${weather.location.region}`}</li>\r\n              <li>{`Country ${weather.location.country}`}</li>\r\n              <li>{`Date:  ${new Date(location.localtime).toLocaleString('en-US',dateOptions)}`}</li>\r\n            </ul>\r\n            <ul className='ul-weather'>\r\n\r\n            <li>{`Wind speed  ${current.wind_kph} km/h`}</li>\r\n              <li>{`Wind gust  ${current.gust_kph} km/h`}</li>\r\n            <li>{`Wind direction ${current.wind_dir}`}</li>\r\n            <li>{`Pressure  ${(current.pressure_mb* 0.75).toFixed(0)} mm`}</li>\r\n            <li>{`Precipitation amount ${current.precip_mm} mm`}</li>\r\n            <li>{`UV Index ${current.uv} `}</li>\r\n          </ul>\r\n              <div className='d-block '>\r\n                <span className='d-block mb-3'>Forecast for 7 days</span>\r\n                <ul className=\"list-group \">\r\n                  {weather?weather.forecast.forecastday.map((v,i)=>\r\n                    <li className=\"pb-0 pt-0 list-group-item text-dark justify-content-between d-inline-flex\" key={i}>\r\n                      <div className='align-self-center'>\r\n                        <strong>{`${new Date(v.date).toLocaleString('en-US',{weekday:'long'})}`}</strong>\r\n                      </div>\r\n                      <div className='justify-content-between' style={{width:'150px'}}>\r\n                      <img src={v.day.condition.icon} alt=\"\"/> <strong>{`${v.day.mintemp_c.toFixed(0)}-${v.day.maxtemp_c.toFixed(0)} °С`}</strong>\r\n                      </div>\r\n                      </li>)\r\n                        :null}\r\n\r\n\r\n                </ul>\r\n              </div>\r\n            </div>\r\n              : <div className=\"loader1\"></div>}\r\n\r\n        </div>\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps=state=>{\r\n  return {\r\n    weather:state.weather,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,{reqWeather,initWeather})(WheatherApp);\r\n","import {REQUEST_WEATHER} from \"./types\";\r\nimport axios from 'axios'\r\n\r\nexport const reqWeather=(city)=>dispatch=>{\r\n\r\n  axios.get(`https://api.apixu.com/v1/forecast.json?key=0e62c6fba7f24ec385035924192104&q=${city}&days=7`)\r\n    .then(res=>\r\n      dispatch({type:REQUEST_WEATHER,\r\n      payload:res.data}))\r\n    .catch(err=>console.log(1))\r\n\r\n};\r\n\r\nexport const initWeather=()=>dispatch=>{\r\n\r\n  axios.get(`https://api.apixu.com/v1/forecast.json?key=0e62c6fba7f24ec385035924192104&q=auto:ip&days=7`)\r\n    .then(res=>\r\n      dispatch({type:REQUEST_WEATHER,\r\n        payload:res.data}))\r\n    .catch(err=>console.log(1))\r\n\r\n};"],"sourceRoot":""}